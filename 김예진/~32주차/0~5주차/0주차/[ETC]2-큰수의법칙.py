# 동빈이의 큰 수의 법칙
# 다양한 수로 이루어진 크기가 N인 배열이 있을 때, 주어진 수들을 M번 더하여 가장 큰 수를 만드는 법칙
# 배열의 특정한 인덱스에 해당하는 수가 연속 K번을 초과하여 더해질 순 없다

# 입력 조건
# 첫째 줄에 N(2 <= N <= 1,000), M(1 <= M <= 10,000), K(1 <= K <= 10,000)의 자연수가 주어지며, 각 자연수는 공백으로 구분
# 둘째 줄에 공백으로 구분하는 N개의 자연수가 주어짐. 각 자연수는 1 이상 10,000 이하의 수
# K는 항상 M보다 작거나 같다

# 출력 조건
# 첫째 줄에 동빈이의 큰 수의 법칙에 따라 더해진 답 출력

# 입력 예시
# 1: 5 8 3 <- 크기 5 배열을 입력할 것이고, 8번 더해서 값을 구할 거고, 한 숫자를 3번 초과해서 연속으로 더할 순 없음
# 2: 2 4 5 4 6

# 출력 예시
# 1: 46


n, m, k = map(int, input().split())
arr = list(map(int, input().split()))

arr.sort()

first = arr[n-1] # 첫 번째로 큰 수
second = arr[n-2] # 두 번째로 큰 수

result = 0
count = 0
# 첫 번째로 큰 수를 K번 더하고, 두 번째로 큰 수를 1번 더하는 것을 반복
while (1):
  for i in range(k): # k번 더하기
    if count == m:
      break
    result += first
    count += 1

  if count == m:
    break

  result += second
  count += 1

print(result)


# 더 나은 답안
# [6, 6, 6, 5] 를 계속 반복하는거임
# n, m, k ===  5 8 3 <- 크기 5 배열을 입력할 것이고, 8번 더해서 값을 구할 거고, 한 숫자를 3번 초과해서 연속으로 더할 순 없음
# K는 항상 M보다 작거나 같다

# 첫 번째로 큰 수가 몇 번 더해지는지
count = (m // (k+1)) * k # 사이클이 나누어 떨어질 때 첫 번째 큰 수가 몇 번 반복되는지
count += m % (k+1) # 나누어 떨어지지 않은 사이클에서 첫 번째 큰 수가 반복되는 횟수를 추가

result = 0
result = count * first
result += second * (m - count)

print(result)